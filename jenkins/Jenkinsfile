node {
    def app
    def full_image_name = 'deepfenceio/jenkins-example:latest'
    def deepfence_mgmt_console_ip = '111.111.111.111' // IP address of Deepfence management console
    def fail_cve_count = 100 // fail jenkins build if number of vulnerabilities found is >= this number. Set -1 to pass regardless of vulnerabilities.

    stage('Clone repository') {
        checkout scm
    }

    stage('Build image') {
        app = docker.build("${full_image_name}")
    }

    stage('Run Deepfence Vulnerability Scanner'){
        DeepfenceAgent = docker.image("deepfenceio/deepfence_agent:latest")
        try {
            c = DeepfenceAgent.run("-it --net=host -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/:/fenced/mnt/host/var/lib/docker/:rw -v /:/fenced/mnt/host/:ro", "-a ${deepfence_mgmt_console_ip} -f audit -t all -i ${full_image_name} -e ${fail_cve_count}")
            sh "docker logs -f ${c.id}"
            def out = sh script: "docker inspect ${c.id} --format='{{.State.ExitCode}}'", returnStdout: true
            sh "exit ${out}"
        } finally {
            c.stop()
        }
    }

    stage('Remove unused docker image') {
        sh "docker rmi ${full_image_name}"
    }
}
